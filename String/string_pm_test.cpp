//
// Created by 王明龙 on 2022/9/5.
//



#include "stringMatch.cpp"

#define printString(s) { for (size_t m = strlen(s), k = 0; k < m; k++) printf("%4c", (s)[k]); }

/******************************************************************************************
  * 显示Next[]表，供演示分析
  ******************************************************************************************/
void printNext(int *N, int offset, int length) {
    for (int i = 0; i < length; i++) printf("%4d", i);
    printf("\n");
    for (int i = 0; i < offset; i++) printf("    ");
    for (int i = 0; i < length; i++) printf("%4d", N[i]);
    printf("\n\n");
}

/******************************************************************************************
 * 显示bc[]表，供演示分析
 ******************************************************************************************/
void printBC(int *bc) {
    printf("\n-- bc[] Table ---------------\n");
    for (size_t j = 0; j < 256; j++) if (0 <= bc[j]) printf("%4c", (char) j);
    printf("\n");
    for (size_t j = 0; j < 256; j++) if (0 <= bc[j]) printf("%4d", bc[j]);
    printf("\n\n");
}

/******************************************************************************************
 * 显示GS[]表，供演示分析
 ******************************************************************************************/
void printGS(char *P, int *GS) {
    printf("-- gs[] Table ---------------\n");
    for (size_t m = strlen(P), j = 0; j < m; j++) printf("%4d", j);
    printf("\n");
    printString(P);
    printf("\n");
    for (size_t m = strlen(P), j = 0; j < m; j++) printf("%4d", GS[j]);
    printf("\n\n");
}

/******************************************************************************************
 * Text     :  0   1   2   .   .   .   i   i+1 .   .   .   i+j .   .   n-1
 *             ------------------------|-------------------|------------
 * Pattern  :                          0   1   .   .   .   j   .   .
 *                                     |-------------------|
 ******************************************************************************************
 * 动态显示匹配进展
 * i为P相对于T的起始位置，j为P的当前字符
 ******************************************************************************************/
void showProgress(char *T, char *P, int i, int j) {
}

int match(char *, char *);

/******************************************************************************************
 * 串匹配算法统一测试
 ******************************************************************************************/
int main(int argc, char *argv[]) {

    string p_s("MAMAMMIA");
    auto p = p_s.c_str();
    string m_s("MAMM");

    // 蛮力匹配算法
    auto m = m_s.c_str();
    auto pos = match_brute_force_v1(p, m);
    cout << pos << endl;
    pos = match_brute_force_v2(p, m);
    cout << pos << endl;

    //KMP匹配算法
    auto n = buildNext(m);
    printNext(n, 0, strlen(m));


    return 0;
}

